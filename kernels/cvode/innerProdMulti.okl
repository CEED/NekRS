#define p_vecBlockSize 5 

#define reduce(nBlock, blockSize, nVec, vecBlockSize, blockIdx, vecBlockIdx, s_in, out) \
{                                                                                       \
    for(int s = p_blockSize/2; s > 1; s >>= 1) {                                        \
      for (int t = 0; t < blockSize; ++t; @inner(0)) {                                  \
        if (t < s) {                                                                    \
          for(int v = 0; v < vecBlockSize; v++) {                                       \
            const dlong vecId = v + vecBlockIdx*vecBlockSize;                           \
            if (vecId < nVec) s_in[v][t] += s_in[v][t + s];                             \
          }                                                                             \
        }                                                                               \
      }                                                                                 \
      @barrier();                                                                       \
    }                                                                                   \
    for (int t = 0; t < blockSize; ++t; @inner(0)) {                                    \
      if (t < 1) {                                                                      \
        for(int v = 0; v < vecBlockSize; v++) {                                         \
          const dlong vecId = v + vecBlockIdx*vecBlockSize;                             \
          if (vecId < nVec) out[blockIdx + vecId*nBlock] = s_in[v][0] + s_in[v][1];     \
        }                                                                               \
      }                                                                                 \
    }                                                                                   \
    @barrier();                                                                         \
}

@kernel void innerProdMulti(const dlong Nblock,
                            const dlong N,
                            const dlong fieldOffset,
                            const dlong NVec,
                            const dlong yOffset,
                            @ restrict const pfloat *x,
                            @ restrict const dfloat *y,
                            @ restrict dfloat *wxy)
{
  for (dlong b = 0; b < Nblock; ++b; @outer(0)) {
    @shared dfloat s_wxy[p_vecBlockSize][p_blockSize+1];

    for (int bVec = 0; bVec < (NVec + p_vecBlockSize - 1) / p_vecBlockSize; ++bVec) {
      for (int t = 0; t < p_blockSize; ++t; @inner(0)) {

#pragma unroll
        for (int v = 0; v < p_vecBlockSize; ++v) {
          s_wxy[v][t] = 0;
        }

        const dlong id = t + p_blockSize * b;
        if (id < N) {
          const dfloat yi = y[id + yOffset];
#pragma unroll
          for (int v = 0; v < p_vecBlockSize; ++v) {
            const dlong vId = v + bVec*p_vecBlockSize;
            if (vId < NVec) s_wxy[v][t] = x[id + fieldOffset * vId] * yi;
          }
        }
      }
      @barrier();

      reduce(Nblock, p_blockSize, NVec, p_vecBlockSize, b, bVec, s_wxy, wxy);
    }
  }
}
