@kernel void strongAdvectionCubatureVolumeHex3D(const dlong Nelements,
                                                const int Nfields,
                                                const int weighted,
                                                const int sharedRho,
                                                @ restrict const dfloat *vgeo,
                                                @ restrict const dfloat *cubD,
                                                @ restrict const dfloat *cubInterpT,
                                                @ restrict const dfloat *cubProjectT,
                                                @ restrict const dlong *computeScalar,
                                                @ restrict const dlong *fieldOffsetScan,
                                                const dlong voffset,
                                                const dlong cubatureOffset,
                                                @ restrict const dfloat *S,
                                                @ restrict const dfloat *Urst,
                                                @ restrict const dfloat *RHO,
                                                @ restrict dfloat *NS)
{
  // (phi, U.grad Ud)
  for (dlong e = 0; e < Nelements; ++e; @outer(0)) {
    @exclusive dfloat r_S[p_cubNq], r_Sd[p_cubNq];

    @shared dfloat s_tmp[p_cubNq][p_cubNq][p_cubNq];

    @exclusive dfloat r_Uhat[p_cubNq], r_Vhat[p_cubNq], r_What[p_cubNq];
    @exclusive dfloat r_scale[p_Nq];
    @exclusive dfloat r_rho[p_Nq];


    for (int j = 0; j < p_cubNq; ++j; @inner(1)) {
      for (int i = 0; i < p_cubNq; ++i; @inner(0)) {
#pragma unroll p_cubNq
        for (int k = 0; k < p_cubNq; ++k) {
          const dlong id = e * p_cubNp + k * p_cubNq * p_cubNq + j * p_cubNq + i;
          r_Uhat[k] = Urst[id + 0 * cubatureOffset];
          r_Vhat[k] = Urst[id + 1 * cubatureOffset];
          r_What[k] = Urst[id + 2 * cubatureOffset];
        }
      }
    }
    for (int b = 0; b < p_cubNq; ++b; @inner(1)) {
      for (int a = 0; a < p_cubNq; ++a; @inner(0)) {
        if (a < p_Nq && b < p_Nq) {
#pragma unroll p_Nq
          for (int c = 0; c < p_Nq; ++c) {
            const dlong gid = e * p_Np * p_Nvgeo + c * p_Nq * p_Nq + b * p_Nq + a;
            r_scale[c] = (weighted) ? 1.0 : vgeo[gid + p_IJWID * p_Np];
          }
        }
      }
    }
    for (dlong field = 0; field < Nfields; field++) {

      if (computeScalar[field]) {

        @barrier();

        for (int b = 0; b < p_cubNq; ++b; @inner(1)) {
          for (int a = 0; a < p_cubNq; ++a; @inner(0)) {
            if (a < p_Nq && b < p_Nq) {
              for (int c = 0; c < p_Nq; ++c) {
                const dlong id = e * p_Np + c * p_Nq * p_Nq + b * p_Nq + a;
                s_tmp[c][b][a] = S[id + fieldOffsetScan[field]];
                if(sharedRho && field < 2) r_rho[c] = RHO[id];
              }
            }
          }
        }
        @barrier();

        // interpolate in 'r'
        for (int c = 0; c < p_cubNq; ++c; @inner(1)) {
          for (int b = 0; b < p_cubNq; ++b; @inner(0)) {
            if (b < p_Nq && c < p_Nq) {
#pragma unroll p_cubNq
              for (int c = 0; c < p_cubNq; ++c) {
                r_S[c] = 0;
              }
              for (int a = 0; a < p_Nq; ++a) {
                dfloat ucba = s_tmp[c][b][a];
#pragma unroll p_cubNq
                for (int i = 0; i < p_cubNq; ++i) {
                  r_S[i] += c_I[i][a] * ucba;
                }
              }
#pragma unroll p_cubNq
              for (int i = 0; i < p_cubNq; ++i) {
                s_tmp[c][b][i] = r_S[i];
              }
            }
          }
        }
        @barrier();

        // interpolate in 's'
        for (int c = 0; c < p_cubNq; ++c; @inner(1)) {
          for (int i = 0; i < p_cubNq; ++i; @inner(0)) {
            if (c < p_Nq) {
#pragma unroll p_cubNq
              for (int j = 0; j < p_cubNq; ++j) {
                r_S[j] = 0;
              }
              for (int b = 0; b < p_Nq; ++b) {
                dfloat ucbi = s_tmp[c][b][i];
#pragma unroll p_cubNq
                for (int j = 0; j < p_cubNq; ++j) {
                  r_S[j] += c_I[j][b] * ucbi;
                }
              }
#pragma unroll p_cubNq
              for (int j = 0; j < p_cubNq; ++j) {
                s_tmp[c][j][i] = r_S[j];
              }
            }
          }
        }
        @barrier();

        // interpolate in 't'
        for (int j = 0; j < p_cubNq; ++j; @inner(1)) {
          for (int i = 0; i < p_cubNq; ++i; @inner(0)) {
#pragma unroll p_cubNq
            for (int k = 0; k < p_cubNq; ++k) {
              r_S[k] = 0;
            }
            for (int c = 0; c < p_Nq; ++c) {
              dfloat ucji = s_tmp[c][j][i];
#pragma unroll p_cubNq
              for (int k = 0; k < p_cubNq; ++k) {
                r_S[k] += c_I[k][c] * ucji;
              }
            }
#pragma unroll p_cubNq
            for (int k = 0; k < p_cubNq; ++k) {
              s_tmp[k][j][i] = r_S[k];
            }
          }
        }
        @barrier();

        for (int j = 0; j < p_cubNq; ++j; @inner(1)) {
          for (int i = 0; i < p_cubNq; ++i; @inner(0)) {
            // advection in 'u'
#pragma unroll p_cubNq
            for (int k = 0; k < p_cubNq; ++k) {
              r_Sd[k] = 0;
            }
            for (int n = 0; n < p_cubNq; ++n) {
              dfloat D = c_D[i][n];
#pragma unroll p_cubNq
              for (int k = 0; k < p_cubNq; ++k) {
                r_Sd[k] += D * s_tmp[k][j][n];
              }
            }
#pragma unroll p_cubNq
            for (int k = 0; k < p_cubNq; ++k) {
              r_S[k] = r_Uhat[k] * r_Sd[k];
            }

            // advection in 'v'
#pragma unroll p_cubNq
            for (int k = 0; k < p_cubNq; ++k) {
              r_Sd[k] = 0;
            }
            for (int n = 0; n < p_cubNq; ++n) {
              dfloat D = c_D[j][n];
#pragma unroll p_cubNq
              for (int k = 0; k < p_cubNq; ++k) {
                r_Sd[k] += D * s_tmp[k][n][i];
              }
            }
#pragma unroll p_cubNq
            for (int k = 0; k < p_cubNq; ++k) {
              r_S[k] += r_Vhat[k] * r_Sd[k];
            }

            // advection in 'w'
#pragma unroll p_cubNq
            for (int k = 0; k < p_cubNq; ++k) {
              r_Sd[k] = 0;
            }
            for (int n = 0; n < p_cubNq; ++n) {
              dfloat t = s_tmp[n][j][i];
#pragma unroll p_cubNq
              for (int k = 0; k < p_cubNq; ++k) {
                r_Sd[k] += c_D[k][n] * t;
              }
            }
#pragma unroll p_cubNq
            for (int k = 0; k < p_cubNq; ++k) {
              r_S[k] += r_What[k] * r_Sd[k];
            }
          }
        }

        // now project back in 'c'
        @barrier();
        for (int j = 0; j < p_cubNq; ++j; @inner(1)) {
          for (int i = 0; i < p_cubNq; ++i; @inner(0)) {
#pragma unroll p_Nq
            for (int c = 0; c < p_Nq; ++c) {
              r_Sd[c] = 0;
            }
            for (int k = 0; k < p_cubNq; ++k) {
              dfloat sk = r_S[k];
#pragma unroll p_Nq
              for (int c = 0; c < p_Nq; ++c) {
                r_Sd[c] += c_I[k][c] * sk;
              }
            }
#pragma unroll p_Nq
            for (int c = 0; c < p_Nq; ++c) {
              s_tmp[c][j][i] = r_Sd[c];
            }
          }
        }
        @barrier();

        // project back in 'b'
        for (int c = 0; c < p_cubNq; ++c; @inner(1)) {
          for (int i = 0; i < p_cubNq; ++i; @inner(0)) {
            if (c < p_Nq) {
#pragma unroll p_Nq
              for (int b = 0; b < p_Nq; ++b) {
                r_S[b] = 0;
              }
              for (int j = 0; j < p_cubNq; ++j) {
                dfloat scji = s_tmp[c][j][i];
#pragma unroll p_Nq
                for (int b = 0; b < p_Nq; ++b) {
                  r_S[b] += c_I[j][b] * scji;
                }
              }
#pragma unroll p_Nq
              for (int b = 0; b < p_Nq; ++b) {
                s_tmp[c][b][i] = r_S[b];
              }
            }
          }
        }
        @barrier();

        // project back in 'a'
        for (int c = 0; c < p_cubNq; ++c; @inner(1)) {
          for (int b = 0; b < p_cubNq; ++b; @inner(0)) {
            if (c < p_Nq && b < p_Nq) {
#pragma unroll p_Nq
              for (int a = 0; a < p_Nq; ++a) {
                r_S[a] = 0;
              }
              for (int i = 0; i < p_cubNq; ++i) {
                dfloat scbi = s_tmp[c][b][i];
#pragma unroll p_Nq
                for (int a = 0; a < p_Nq; ++a) {
                  r_S[a] += c_I[i][a] * scbi;
                }
              }
#pragma unroll p_Nq
              for (int a = 0; a < p_Nq; ++a) {
                s_tmp[c][b][a] = r_S[a];
              }
            }
          }
        }
        @barrier();

        for (int b = 0; b < p_cubNq; ++b; @inner(1)) {
          for (int a = 0; a < p_cubNq; ++a; @inner(0)) {
            if (a < p_Nq && b < p_Nq) {
#pragma unroll p_Nq
              for (int c = 0; c < p_Nq; ++c) {
                const dlong id = e * p_Np + c * p_Nq * p_Nq + b * p_Nq + a;
                dfloat value = NS[id + fieldOffsetScan[field]];
                dfloat rhoM = r_rho[c];
                if(!sharedRho) {
                  rhoM = RHO[id + fieldOffsetScan[field]];
                }
                value -= rhoM * r_scale[c] * s_tmp[c][b][a];
                NS[id + fieldOffsetScan[field]] = value;
              }
            }
          }
        }
      }
    }
  }
}
