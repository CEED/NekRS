//
// nekRS User Defined File
//
#include <math.h>
#include "udf.hpp"
#include "ci.inc"

static occa::memory o_nekFU;
static occa::memory o_nekMue;
static dfloat P_ROT;

#ifdef __okl__

#include "channel.oudf"

#endif

void userf(nrs_t *nrs, double time, occa::memory o_U, occa::memory o_FU)
{
  o_FU.copyFrom(o_nekFU, nrs->NVfields * nrs->fieldOffset);
}

void uservp(nrs_t *nrs,
            double time,
            occa::memory o_U,
            occa::memory o_S,
            occa::memory o_UProp,
            occa::memory o_SProp)
{
  mesh_t *mesh = nrs->meshV;
  occa::memory o_mue = o_UProp.slice(0 * nrs->fieldOffset);
  occa::memory o_rho = o_UProp.slice(1 * nrs->fieldOffset);
  platform->linAlg->fill(mesh->Nlocal, 1.0, o_rho);
  o_mue.copyFrom(o_nekMue, mesh->Nlocal);
}

void UDF_Setup0(MPI_Comm comm, setupAide &options)
{
  options.getArgs("CI-MODE", ciMode);
  if (ciMode) {
    ciSetup(comm, options);
  }
  platform->par->extract("casedata", "p_rot", P_ROT);
  if (platform->options.compareArgs("BUILD ONLY", "FALSE")) {
    double *const nek_cb_scnrs = (double *)nek::ptr("cb_scnrs");
    nek_cb_scnrs[0] = P_ROT;
  }
}

void UDF_Setup(nrs_t *nrs)
{
  mesh_t *mesh = nrs->meshV;

  udf.uEqnSource = &userf;
  udf.properties = &uservp;

  nek::userchk();
  auto mul = (double *)nek::scPtr(1);
  auto FUx = (double *)nek::scPtr(2);
  auto FUy = (double *)nek::scPtr(3);
  auto FUz = (double *)nek::scPtr(4);

  o_nekFU = platform->device.malloc<dfloat>(nrs->NVfields * nrs->fieldOffset);
  o_nekMue = platform->device.malloc<dfloat>(nrs->fieldOffset);

  o_nekMue.copyFrom(mul, mesh->Nlocal);
  o_nekFU.copyFrom(FUx, mesh->Nlocal, 0 * nrs->fieldOffset);
  o_nekFU.copyFrom(FUy, mesh->Nlocal, 1 * nrs->fieldOffset);
  o_nekFU.copyFrom(FUz, mesh->Nlocal, 2 * nrs->fieldOffset);
}

void UDF_ExecuteStep(nrs_t *nrs, double time, int tstep)
{
  if (nrs->isOutputStep) {
    nek::ocopyToNek(time, tstep);
    nek::userchk();
  }
  if (ciMode) {
    ciTestErrors(nrs, time, tstep);
  }
}
