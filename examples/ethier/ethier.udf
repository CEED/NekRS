//
// nekRS User Defined File
//

#include <math.h>
#include "udf.hpp"

#include "ci.inc"
#include <vector>

static dfloat P_U0;
static dfloat P_V0;
static dfloat P_W0;

static dfloat P_A0;
static dfloat P_D0;

static dfloat P_OMEGA;
static dfloat P_AMP;

occa::kernel dpdxKernel; 
occa::kernel exactUVWPKernel; 
occa::kernel userMeshVelocityKernel;
occa::memory o_x0, o_y0, o_z0;

@oklBegin {

@kernel void dpdx(const dlong Ntotal,
                     const dfloat time, 
                     @restrict const  dfloat *  x,
                     @restrict const  dfloat *  y,
                     @restrict const  dfloat *  z,                      
                     const dlong offset,
                     @restrict dfloat * FS) {
  for(dlong n=0;n<Ntotal;++n;@tile(p_blockSize,@outer,@inner)){
    if(n<Ntotal){
      const dfloat xn = x[n]; 
      const dfloat yn = y[n]; 
      const dfloat zn = z[n]; 
      //
      const dfloat a = p_A; 
      const dfloat d = p_D; 
      //
      const dfloat xx = xn - p_U0*time; 
      const dfloat yy = yn - p_V0*time; 
      const dfloat zz = zn - p_W0*time; 
      //
      const dfloat exy = exp( a * ( xx + yy ) );
      const dfloat eyz = exp( a * ( yy + zz ) );
      const dfloat ezx = exp( a * ( zz + xx ) );
      // 
      const dfloat sxy = sin( a * xx + d * yy );
      const dfloat syz = sin( a * yy + d * zz );
      const dfloat szx = sin( a * zz + d * xx );
      //
      const dfloat cxy = cos( a * xx + d * yy );
      const dfloat cyz = cos( a * yy + d * zz );
      const dfloat czx = cos( a * zz + d * xx );
      // 
      const dfloat dpdx = -0.5f*(a*a*exp(-2.f*d*d*p_nu*time)*(2.f*a*exp(2.f*a*xx) 
                         + 2.f*a*cxy*czx*eyz + 2.f*d*czx*cyz*exy 
                         + 2.f*a*cxy*syz*ezx + 2.f*a*cyz*szx*exy 
                         - 2.f*a*sxy*syz*ezx - 2.f*d*sxy*szx*eyz)); 

      FS[n + offset] = -dpdx; 
    }
  }
}

void exact(dfloat *u, dfloat *v, dfloat *w, dfloat *p,
           const dfloat x, const dfloat y, const dfloat z,
           const dfloat t, const dfloat visc)
{                                                                        
  const dfloat a = p_A;                                                   
  const dfloat d = p_D;                                                   

  const dfloat xx = x - p_U0*t;
  const dfloat yy = y - p_V0*t;
  const dfloat zz = z - p_W0*t;

  const dfloat ex  = exp(a*xx);                                                        
  const dfloat ey  = exp(a*yy);                                                        
  const dfloat ez  = exp(a*zz);                                                        
  const dfloat e2t = exp(-visc*d*d*t);                                                  
                                                                         
  const dfloat exy = exp(a*(xx + yy));                                                 
  const dfloat eyz = exp(a*(yy + zz));                                                  
  const dfloat ezx = exp(a*(zz + xx));                                                  
                                                                         
  const dfloat sxy = sin(a*xx + d*yy);                                                  
  const dfloat syz = sin(a*yy + d*zz);                                                  
  const dfloat szx = sin(a*zz + d*xx);                                                  
  
  const dfloat cxy = cos(a*xx + d*yy);                                                  
  const dfloat cyz = cos(a*yy + d*zz);                                                  
  const dfloat czx = cos(a*zz + d*xx);                                                  
                                                                         
  *(u)= -a*(ex*syz + ez*cxy)*e2t + p_U0;                                        
  *(v)= -a*(ey*szx + ex*cyz)*e2t + p_V0;                                        
  *(w)= -a*(ez*sxy + ey*czx)*e2t + p_W0;

  *(p)= 0.5*a*a*e2t*e2t * (ex * ex + 2.0 * sxy * czx * eyz +
                           ey * ey + 2.0 * syz * cxy * ezx +
                           ez * ez + 2.0 * szx * cyz * exy);

}   

void grad_u(dfloat *grad_u_x, dfloat *grad_u_y, dfloat *grad_u_z,
           const dfloat x, const dfloat y, const dfloat z,
           const dfloat t, const dfloat visc)
{                                                                        
  const dfloat a = p_A;                                                   
  const dfloat d = p_D;                                                   

  const dfloat xx = x - p_U0*t;
  const dfloat yy = y - p_V0*t;
  const dfloat zz = z - p_W0*t;

  const dfloat ex  = exp(a*xx);                                                        
  const dfloat ey  = exp(a*yy);                                                        
  const dfloat ez  = exp(a*zz);                                                        
  const dfloat e2t = exp(-visc*d*d*t);                                                  
                                                                         
  const dfloat exy = exp(a*(xx + yy));                                                 
  const dfloat eyz = exp(a*(yy + zz));                                                  
  const dfloat ezx = exp(a*(zz + xx));                                                  
                                                                         
  const dfloat sxy = sin(a*xx + d*yy);                                                  
  const dfloat syz = sin(a*yy + d*zz);                                                  
  const dfloat szx = sin(a*zz + d*xx);                                                  
                                                                         
  const dfloat cxy = cos(a*xx + d*yy);                                                  
  const dfloat cyz = cos(a*yy + d*zz);                                                  
  const dfloat czx = cos(a*zz + d*xx);                                                  
                                                                         
  //*(u)= -a*(ex*syz + ez*cxy)*e2t;
  *(grad_u_x)= -a*((a*ex)*syz -a*ez*sxy)*e2t;
  *(grad_u_y)= -a*(ex*(a*cyz) + ez*(-d*sxy))*e2t;
  *(grad_u_z)= -a*(ex*(d*cyz) + (a*ez)*cxy)*e2t;

}   

@kernel void exactUVWP(const dlong Ntotal,
                       const dfloat time, 
                       @restrict const  dfloat *  X,
                       @restrict const  dfloat *  Y,
                       @restrict const  dfloat *  Z,                      
                       const dlong offset,
                       @restrict dfloat * P,
                       @restrict dfloat * U) {
  for(dlong n=0;n<Ntotal;++n;@tile(p_blockSize,@outer,@inner)){
    if(n<Ntotal){
      dfloat u, v, w, p;
      const dfloat x = X[n];
      const dfloat y = Y[n];
      const dfloat z = Z[n];
      exact(&u, &v, &w, &p, x, y, z, time, p_nu);
      U[n + 0*offset] = u; 
      U[n + 1*offset] = v; 
      U[n + 2*offset] = w;
      P[n] = p; 
    }
  }
}

void velocityDirichletConditions(bcData *bc)
{                                                                        
  dfloat u, v, w, p;
  exact(&u, &v, &w, &p, bc->x, bc->y, bc->z, bc->time, p_nu);
  bc->u = u;
  bc->v = v;
  bc->w = w;
}

void scalarDirichletConditions(bcData *bc)
{                                                                        
  dfloat u, v, w, p;
  exact(&u, &v, &w, &p, bc->x, bc->y, bc->z, bc->time, p_nu);
  bc->s = u;
}

void scalarNeumannConditions(bcData *bc)
{                                                                        
  dfloat grad_u_x, grad_u_y, grad_u_z;
  grad_u(&grad_u_x, &grad_u_y, &grad_u_z, bc->x, bc->y, bc->z, bc->time, p_nu);
  bc->flux = p_nu * (grad_u_x * bc->nx + grad_u_y * bc->ny + grad_u_z * bc->nz);
}

@kernel void userMeshVelocity(const dlong Ntotal,
                    const dlong offset,
                    const dfloat time,
                    @restrict const dfloat * x,
                    @restrict const dfloat * y,
                    @restrict const dfloat * z,
                    @restrict dfloat * W)
{
  for(dlong n=0;n<Ntotal;++n;@tile(p_blockSize,@outer,@inner)){
      const dfloat ampx = p_amp*cos(p_omega*time);
      const dfloat ampy = p_amp*cos(0.5*p_omega*time);
      const dfloat ampz = p_amp*cos(0.5*0.5*p_omega*time);
      const dfloat xx = 0.5*(x[n] + 1); // in [0 1]
      const dfloat yy = 0.5*(y[n] + 1); // in [0 1]
      const dfloat zz = 0.5*(z[n] + 1); // in [0 1]
      W[n + 0 * offset] = ampx*sin(p_pi*xx);
      W[n + 1 * offset] = ampy*sin(p_pi*yy);
      W[n + 2 * offset] = ampz*sin(p_pi*zz);
  }
}

} @oklEnd

void userq(nrs_t *nrs, dfloat time, occa::memory o_S, occa::memory o_FS)
{
  mesh_t *mesh = nrs->meshV; 
  cds_t *cds   = nrs->cds; 
  const dlong Nlocal = nrs->meshV->Nelements * nrs->meshV->Np;

  dpdxKernel(Nlocal, time, mesh->o_x, mesh->o_y, mesh->o_z, 0*cds->fieldOffset[0], o_FS);
  dpdxKernel(Nlocal, time, mesh->o_x, mesh->o_y, mesh->o_z, 1*cds->fieldOffset[0], o_FS);
}                                                   

void UDF_LoadKernels(occa::properties& kernelInfo)
{
  // called from all ranks, so MPI collectives are O.K.
  int maxRank = platform->comm.mpiRank;
  MPI_Allreduce(MPI_IN_PLACE, &maxRank, 1, MPI_INT, MPI_MAX, platform->comm.mpiComm);

  setupAide &options = platform->options;

  dfloat mue, rho;
  options.getArgs("VISCOSITY", mue);
  options.getArgs("DENSITY", rho); 
  kernelInfo["defines/p_nu"] = mue/rho;
  kernelInfo["defines/p_U0"] = P_U0;
  kernelInfo["defines/p_V0"] = P_V0;
  kernelInfo["defines/p_W0"] = P_W0;
  kernelInfo["defines/p_A"]  = P_A0 * M_PI;
  kernelInfo["defines/p_D"]  = P_D0 * M_PI;
  kernelInfo["defines/p_amp"] = P_AMP;
  kernelInfo["defines/p_omega"] = P_OMEGA;
  kernelInfo["defines/p_pi"] = M_PI;

  dpdxKernel = oudfBuildKernel(kernelInfo, "dpdx");
  exactUVWPKernel = oudfBuildKernel(kernelInfo, "exactUVWP"); 
  userMeshVelocityKernel = oudfBuildKernel(kernelInfo, "userMeshVelocity");
}

void UDF_Setup0(MPI_Comm comm, setupAide &options)
{
  options.getArgs("CI-MODE", ciMode);
  if (ciMode) ciSetup(comm, options);
  platform->par->extract("casedata", "p_u0", P_U0);
  platform->par->extract("casedata", "p_v0", P_V0);
  platform->par->extract("casedata", "p_w0", P_W0);
  platform->par->extract("casedata", "p_a0", P_A0);
  platform->par->extract("casedata", "p_d0", P_D0);
  platform->par->extract("casedata", "p_omega", P_OMEGA);
  platform->par->extract("casedata", "p_amp", P_AMP);

  if (platform->options.compareArgs("BUILD ONLY", "FALSE")) {
    double* const nek_cb_scnrs = (double*) nek::ptr("cb_scnrs");
    nek_cb_scnrs[0] = P_U0;
    nek_cb_scnrs[1] = P_V0;
    nek_cb_scnrs[2] = P_W0;
    nek_cb_scnrs[3] = P_A0;
    nek_cb_scnrs[4] = P_D0;
    nek_cb_scnrs[5] = P_OMEGA;
    nek_cb_scnrs[6] = P_AMP;
  }
}

void UDF_Setup(nrs_t *nrs)
{
  mesh_t *mesh = nrs->meshV;
  udf.sEqnSource = &userq;
  if(platform->options.compareArgs("MOVING MESH", std::string("TRUE"))) {
    o_x0 = platform->device.malloc(mesh->Nlocal, sizeof(dfloat), mesh->o_x);
    o_y0 = platform->device.malloc(mesh->Nlocal, sizeof(dfloat), mesh->o_y);
    o_z0 = platform->device.malloc(mesh->Nlocal, sizeof(dfloat), mesh->o_z);
  }
}

void UDF_ExecuteStep(nrs_t *nrs, dfloat time, int tstep)
{
  mesh_t *mesh = nrs->meshV;
  cds_t *cds = nrs->cds;

  if (tstep <= 5) {
    exactUVWPKernel(mesh->Nlocal, time, mesh->o_x, mesh->o_y, mesh->o_z, nrs->fieldOffset, nrs->o_P, nrs->o_U);
    if (nrs->pSolver) 
      ellipticZeroMean(nrs->pSolver, nrs->o_P);
    if (nrs->Nscalar > 0) 
      cds->o_S.copyFrom(nrs->o_U, mesh->Nlocal*sizeof(dfloat), 0*cds->fieldOffset[0]*sizeof(dfloat));
    if (nrs->Nscalar > 1) 
    cds->o_S.copyFrom(nrs->o_U, mesh->Nlocal*sizeof(dfloat), 1*cds->fieldOffset[0]*sizeof(dfloat));
  }

  if(platform->options.compareArgs("MOVING MESH", std::string("TRUE")))
    userMeshVelocityKernel(
      mesh->Nlocal,
      nrs->fieldOffset,
      time,
      o_x0,
      o_y0,
      o_z0,
      mesh->o_U);

  if (nrs->isOutputStep) {
    nek::ocopyToNek(time, tstep);
    nek::userchk();
  }
  if (ciMode) ciTestErrors(nrs, time, tstep);
}
