//
// nekRS User Defined File
//
#include "udf.hpp"
#include "plugins/RANSktau.hpp"

#include "ci.inc"

static dfloat rho, mueLam;

#ifdef __okl__

#include "channel.oudf"

#endif

void userq(nrs_t *nrs, dfloat time, occa::memory o_S, occa::memory o_FS)
{
  mesh_t *mesh = nrs->meshV;
  cds_t *cds   = nrs->cds;

  RANSktau::updateSourceTerms();
}

void uservp(nrs_t *nrs, dfloat time, occa::memory o_U, occa::memory o_S,
            occa::memory o_UProp, occa::memory o_SProp)
{
  mesh_t *mesh = nrs->meshV;
  cds_t *cds   = nrs->cds;

  RANSktau::updateProperties();

  dfloat conductivity;
  platform->options.getArgs("SCALAR00 DIFFUSIVITY", conductivity);
  const dfloat Pr_t = 0.7;
  occa::memory o_mue_t = RANSktau::o_mue_t();
  occa::memory o_temp_mue = cds->o_diff + 0*cds->fieldOffset[0]*sizeof(dfloat);
  scalarScaledAdd(mesh->Nlocal, conductivity, 1/Pr_t, o_mue_t, o_temp_mue); 
}

void UDF_Setup0(MPI_Comm comm, setupAide &options)
{
  options.getArgs("CI-MODE", ciMode);
  if (ciMode) ciSetup(comm, options);
}

void UDF_Setup(nrs_t *nrs)
{
  mesh_t *mesh = nrs->meshV;
  cds_t *cds = nrs->cds;

  udf.properties = &uservp;
  udf.sEqnSource = &userq;

  const int scalarFieldStart = 1;
  platform->options.getArgs("VISCOSITY", mueLam); 
  platform->options.getArgs("DENSITY", rho); 

  RANSktau::setup(nrs, mueLam, rho, scalarFieldStart);
}

void UDF_ExecuteStep(nrs_t *nrs, dfloat time, int tstep)
{
  if (ciMode) ciTestErrors(nrs, time, tstep);
}
