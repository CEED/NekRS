#include <numeric>
#include "udf.hpp"

static dfloat P_EPS;
static bool runBP5 = false;
static bool runBPS5 = false;
static bool runBP6 = false;;
static int bp5NReps, bps5NReps, bp6NReps;

#ifdef __okl__

#endif

void runBenchmarks(nrs_t *nrs)
{
  mesh_t *mesh = nrs->meshV;

  std::vector<dfloat> rhs;
  rhs.reserve(nrs->fieldOffset);

  for (int i = 0; i < mesh->Nlocal; i++) {
    const dfloat lambda = 0;
    rhs[i] = (3 * M_PI * M_PI + lambda) * sin(M_PI * mesh->x[i]) * sin(M_PI * mesh->y[i]) * sin(M_PI * mesh->z[i]);
  }
  auto o_rhs = platform->device.malloc<dfloat>(nrs->NVfields * nrs->fieldOffset);
  o_rhs.copyFrom(rhs.data(), nrs->fieldOffset, 0 * nrs->fieldOffset);
  o_rhs.copyFrom(rhs.data(), nrs->fieldOffset, 1 * nrs->fieldOffset);
  o_rhs.copyFrom(rhs.data(), nrs->fieldOffset, 2 * nrs->fieldOffset);


  std::vector<std::string> benchmarks;
  if (runBPS5) {
    benchmarks.push_back("BPS5");
  }
  if (runBP5) {
    benchmarks.push_back("BP5");
  }
  if (runBP6) {
    benchmarks.push_back("BP6");
    benchmarks.push_back("BP6_PCGC");
  }

  if (platform->comm.mpiRank == 0) {
    std::cout << "\nrunning benchmarks\n";
  }

  for (auto &benchmark : benchmarks) {
    MPI_Barrier(platform->comm.mpiComm);
    if (platform->comm.mpiRank == 0) {
      std::cout << "\n" << benchmark << "\n";
    }

    elliptic_t *solver;

    int Nrep;
    if (benchmark == "BP5") {
      solver = nrs->pSolver;

      Nrep = bp5NReps;
      solver->options.setArgs("PRECONDITIONER", "NONE");
      solver->options.setArgs("SOLVER", "PCG");
      solver->options.setArgs("MAXIMUM ITERATIONS", "1000");
      solver->options.setArgs("SOLVER TOLERANCE", to_string_f(1e-15));
      ellipticPreconditionerSetup(solver, solver->ogs);
    }
    if (benchmark == "BPS5") {
      solver = nrs->pSolver;

      Nrep = bps5NReps;
      solver->options.setArgs("SOLVER TOLERANCE", to_string_f(1e-8));
      solver->options.setArgs("LINEAR SOLVER STOPPING CRITERION", "RELATIVE");
    }
    if (benchmark == "BP6") {
      solver = nrs->uvwSolver;

      Nrep = bp6NReps;
      solver->options.setArgs("PRECONDITIONER", "NONE");
      solver->options.setArgs("BLOCK SOLVER", "TRUE");
      solver->options.setArgs("SOLVER", "PCG");
      solver->options.setArgs("MAXIMUM ITERATIONS", "1000");
      solver->options.setArgs("SOLVER TOLERANCE", to_string_f(1e-15));
      ellipticPreconditionerSetup(solver, solver->ogs);
    }
    if (benchmark == "BP6_PCGC") {
      solver = nrs->uvwSolver;

      Nrep = bp6NReps;
      solver->options.setArgs("PRECONDITIONER", "JACOBI");
      solver->options.setArgs("BLOCK SOLVER", "TRUE");
      solver->options.setArgs("SOLVER", "PCG+COMBINED");
      solver->options.setArgs("MAXIMUM ITERATIONS", "1000");
      solver->options.setArgs("SOLVER TOLERANCE", to_string_f(1e-15));
      ellipticPreconditionerSetup(solver, solver->ogs);
    }

    solver->resNormFactor = 1 / mesh->volume;
    platform->linAlg->fill(nrs->fieldOffset, 1.0, solver->o_lambda0);
    platform->linAlg->fill(nrs->fieldOffset, 1.0, solver->o_lambda1);


    std::vector<double> eTime;
    std::vector<double> precoTime;
    std::vector<double> smootherTime;
    std::vector<double> crsTime;

    for (int i = 0; i < Nrep; i++) {
      platform->linAlg->fill(nrs->NVfields * nrs->fieldOffset, 0.0, nrs->o_U);

      platform->timer.reset();
      platform->flopCounter->clear();

      platform->device.finish();
      MPI_Barrier(platform->comm.mpiComm);

      const auto tStart = MPI_Wtime();
      ellipticSolve(solver, o_rhs, nrs->o_U);
      platform->device.finish();
      platform->timer.set(solver->name + "Solve", MPI_Wtime() - tStart);

      eTime.push_back(platform->timer.query(solver->name + "Solve", "DEVICE:MAX"));
      precoTime.push_back(platform->timer.query(solver->name + " preconditioner", "DEVICE:MAX"));
      for (int i = mesh->N; i > 0; i--) {
        const auto val =
            platform->timer.query(solver->name + " preconditioner smoother N=" + std::to_string(i), "DEVICE:MAX");
        if (val > 0) {
          smootherTime.push_back(val);
        }
      }
      crsTime.push_back(platform->timer.query("coarseSolve", "DEVICE:MAX"));
    }
    if (platform->comm.mpiRank == 0) {
      printf("\n");
    }

    hlong Ntotal = mesh->Nelements * pow(mesh->N, nrs->dim);
    MPI_Allreduce(MPI_IN_PLACE, &Ntotal, 1, MPI_HLONG, MPI_SUM, platform->comm.mpiComm);

    const auto minEntry = std::distance(eTime.begin(), std::min_element(eTime.begin(), eTime.end()));
    const double solveTime = eTime.at(minEntry);
    const double solveTimeMax = *std::max_element(eTime.begin(), eTime.end());
    const double solveTimeAvg = std::accumulate(eTime.begin(), eTime.end(), 0.0) / Nrep;
    const double throughput = ((solver->Nfields * Ntotal) / solveTime) / platform->comm.mpiCommSize;
    const double flopsPerSecond = platform->flopCounter->get(platform->comm.mpiComm) / solveTime;

    if (platform->comm.mpiRank == 0) {
      printf("repetitions: %d\n", Nrep);
      printf("solve time: min: %gs  avg: %gs  max: %gs\n", solveTime, solveTimeAvg, solveTimeMax);
      if (precoTime.at(minEntry) > 0) {
        printf("  preconditioner %gs\n", precoTime.at(minEntry));
      }

      if (smootherTime.size()) {
        const auto mgLevels = smootherTime.size() / Nrep;
        for (int i = 0; i < mgLevels; i++) {
          const auto entry = minEntry * mgLevels + i;
          if (smootherTime.at(entry) > 0) {
            printf("    smoother %gs\n", smootherTime.at(entry));
          }
        }
        if (crsTime.at(minEntry) > 0) {
          printf("    coarse grid %gs\n", crsTime.at(minEntry));
        }
      }

      printf("iterations: %d\n", solver->Niter);
      printf("throughput: %g (DOF x iter)/s/rank\n", (double)solver->Niter * throughput);
      if (benchmark == "BPS5") {
        printf("throughput: %g DOF/s/rank\n", throughput);
      }
      if (!solver->options.compareArgs("PRECONDITIONER", "SEMFEM")) {
        printf("flops/rank: %g \n", flopsPerSecond / platform->comm.mpiCommSize);
      }
    }
  }
}

void UDF_LoadKernels(occa::properties &kernelInfo) {}

void UDF_Setup0(MPI_Comm comm, setupAide &options)
{
  platform->par->extract("casedata", "eps", P_EPS);

  platform->par->extract("casedata", "bp5", runBP5);
  platform->par->extract("casedata", "bp5Repetitions", bp5NReps);

  platform->par->extract("casedata", "bps5", runBPS5);
  platform->par->extract("casedata", "bps5Repetitions", bps5NReps);

  platform->par->extract("casedata", "bp6", runBP6);
  platform->par->extract("casedata", "bp5Repetitions", bp6NReps);

  if (platform->options.compareArgs("BUILD ONLY", "FALSE")) {
    double *const nek_cb_scnrs = (double *)nek::ptr("cb_scnrs");
    nek_cb_scnrs[0] = P_EPS;
  }

  int gsOverlap = 1;
  platform->par->extract("casedata", "gsoverlap", gsOverlap);
  if (!gsOverlap) {
    platform->options.setArgs("ENABLE GS COMM OVERLAP", "FALSE");
  }
}

void UDF_Setup(nrs_t *nrs)
{
#if 0
  platform->timer.disable();
#endif
}

void UDF_ExecuteStep(nrs_t *nrs, double time, int tstep)
{
  mesh_t *mesh = nrs->meshV;

#if 1
  {
    oogs_t *oogsh_host = oogs::setup(mesh->ogs, 1, mesh->Nelements * mesh->Np, ogsDfloat, NULL, OOGS_HOSTMPI);
    if (oogs::gpu_mpi()) {
      oogs_t *oogsh_device =
          oogs::setup(mesh->ogs, 1, mesh->Nelements * mesh->Np, ogsDfloat, NULL, OOGS_DEVICEMPI);
    }
  }
  {
    oogs_t *oogsh_host = oogs::setup(mesh->ogs, 1, mesh->Nelements * mesh->Np, ogsPfloat, NULL, OOGS_HOSTMPI);
    if (oogs::gpu_mpi()) {
      oogs_t *oogsh_device =
          oogs::setup(mesh->ogs, 1, mesh->Nelements * mesh->Np, ogsPfloat, NULL, OOGS_DEVICEMPI);
    }
  }
#endif

  runBenchmarks(nrs);
}
