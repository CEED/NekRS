@kernel void ellipticPartialAxCoeffHex3D(const dlong Nelements,
                                       const dlong offset,
                                       const dlong loffset,
                                       @restrict const dlong*  elementList,
                                       @restrict const dfloat*  ggeo,
                                       @restrict const dfloat*  D,
                                       @restrict const dfloat*  S,
                                       @restrict const dfloat*  lambda,
                                       @restrict const dfloat*  q,
                                       @restrict dfloat*  Aq)
{
  for(dlong e = 0; e < Nelements; ++e; @outer(0)) {
#if (p_Nq % 2 == 0)
    @shared dfloat s_D[p_Nq][p_Nq+1];
#else
    @shared dfloat s_D[p_Nq][p_Nq];
#endif
    @shared dfloat s_q[p_Nq][p_Nq];

    @shared dfloat s_Gqr[p_Nq][p_Nq];
    @shared dfloat s_Gqs[p_Nq][p_Nq];

    @exclusive dfloat r_qt, r_Gqt, r_Auk;
    @exclusive dfloat r_q[p_Nq];
    @exclusive dfloat r_Aq[p_Nq];

    @exclusive dlong element;

    @exclusive dfloat r_G00, r_G01, r_G02, r_G11, r_G12, r_G22, r_GwJ;
    @exclusive dfloat r_lam0, r_lam1;

    for(int j = 0; j < p_Nq; ++j; @inner(1))
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
        s_D[j][i] = D[p_Nq * j + i];
        element = elementList[e];
      }

    @barrier("local");

    for(int j = 0; j < p_Nq; ++j; @inner(1)) {
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
#pragma unroll p_Nq
        for(int k = 0; k < p_Nq; k++) {
          const dlong base = i + j * p_Nq + element * p_Np;
          r_q[k] = q[base + k * p_Nq * p_Nq];
          r_Aq[k] = 0;
        }
      }
    }

    @barrier("local");

#pragma unroll p_Nq
    for(int k = 0; k < p_Nq; k++) {
      @barrier("local");
      for(int j = 0; j < p_Nq; ++j; @inner(1))
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          const dlong gbase = element * p_Nggeo * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;

          r_G00 = ggeo[gbase + p_G00ID * p_Np];
          r_G01 = ggeo[gbase + p_G01ID * p_Np];
          r_G02 = ggeo[gbase + p_G02ID * p_Np];

          r_G11 = ggeo[gbase + p_G11ID * p_Np];
          r_G12 = ggeo[gbase + p_G12ID * p_Np];
          r_G22 = ggeo[gbase + p_G22ID * p_Np];

          r_GwJ = ggeo[gbase + p_GWJID * p_Np];

          const dlong id = element * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;
          r_lam0 = lambda[id + 0 * offset];

#ifdef p_poisson
          r_lam1 = 0;
#else
          r_lam1 = lambda[id + 1 * offset];
#endif
        }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          s_q[j][i] = r_q[k];

          r_qt = 0;

#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; m++)
            r_qt += s_D[k][m] * r_q[m];
        }
      }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
          dfloat qr = 0;
          dfloat qs = 0;

#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; m++) {
            qr += s_D[i][m] * s_q[j][m];
            qs += s_D[j][m] * s_q[m][i];
          }

          s_Gqs[j][i] = r_lam0 * (r_G01 * qr + r_G11 * qs + r_G12 * r_qt);
          s_Gqr[j][i] = r_lam0 * (r_G00 * qr + r_G01 * qs + r_G02 * r_qt);

          r_Gqt = r_lam0 * (r_G02 * qr + r_G12 * qs + r_G22 * r_qt);
          r_Auk = r_lam1 * r_GwJ * r_q[k];
        }
      }

      @barrier("local");

      for(int j = 0; j < p_Nq; ++j; @inner(1)) {
        for(int i = 0; i < p_Nq; ++i; @inner(0)) {
#pragma unroll p_Nq
          for(int m = 0; m < p_Nq; m++) {
            r_Auk   += s_D[m][j] * s_Gqs[m][i];
            r_Aq[m] += s_D[k][m] * r_Gqt;
            r_Auk   += s_D[m][i] * s_Gqr[j][m];
          }

          r_Aq[k] += r_Auk;
        }
      }
    }

    @barrier("local");

    for(int j = 0; j < p_Nq; ++j; @inner(1)) {
      for(int i = 0; i < p_Nq; ++i; @inner(0)) {
#pragma unroll p_Nq
        for(int k = 0; k < p_Nq; k++) {
          const dlong id = element * p_Np + k * p_Nq * p_Nq + j * p_Nq + i;
          Aq[id] = r_Aq[k];
        }
      }
    }
  }
}
