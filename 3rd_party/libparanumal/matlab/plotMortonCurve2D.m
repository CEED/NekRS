function plotMortonCurve2D(D)%I = reshape(I, 2, 2^(D-1));%J = reshape(J, 2, 2^(D-1));%plot(I,J, 'r-*');Z = 0:2^D;[I,J] = meshgrid(Z);Z = IJtoZ(D,I,J);if(0)surf(I,J,0*J,Z)shading flatview(2)axis offaxis imageendZ = 0:2^(2*D)-1;[I,J] = ZtoIJ(D, Z)plot(I(:)+.5,J(:)+.5, 'b-')hold onplot3(I+.5,J+.5, .01+0*I, 'r.', 'markersize', 10)fsize = 10if(D==4) fsize = 8 endfor n=1:length(I(:))	ha = text(I(n)+.3,J(n)+.2,sprintf('%03d',n-1), 'fontsize', fsize);endhold offaxis equalaxis offfname = sprintf('mortonCurve2D%dB.pdf', D)  myprint('-dpdfwrite', fname)  scmd = sprintf('pdfcrop %s', fname);system(scmd)return endfunction [I,J] = ZtoIJ(D, Z)  I = 0; %% first coordinate  J = 0; %% second coordinate  for n=0:D    I = I + bitand(2^(2*n+0),Z)/2^n;    J = J + bitand(2^(2*n+1),Z)/2^(n+1);  endreturnendfunction [Z] = IJtoZ(D, I, J)  mask = 1; %% bit mask  Z = zeros(size(I));for n=0:D Z = Z + bitand(2^n, I)*2^n; Z = Z + bitand(2^n, J)*2^(n+1);endreturnend# function [I,J] = ZtoIJ(D, Z)# I = 0;# J = 0;# mask = 1;# d = 1;# for n=0:D#   I = I + bitand(mask,Z)/d;#   mask = mask*2;#   J = J + bitand(mask,Z)/(2*d);#   mask = mask*2;#   d = d*2;# end#  box off#  axis off#  axis equal# return# end# function [Z] = IJtoZ(D, I, J)# mask = 1;# Z = zeros(size(I));# for n=0:D# Z = Z + bitand(mask,I)*(2^n);# Z = Z + bitand(mask,J)*(2^(n+1));# mask = mask*2;# end# return# end